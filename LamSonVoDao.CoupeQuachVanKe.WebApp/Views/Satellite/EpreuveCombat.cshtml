<style scoped>
    a.collapsed {
        text-decoration: none;
    }

    .panel-heading a:after {
        font-family: 'Glyphicons Halflings';
        content: "\e114";
        float: right;
        color: white;
    }

    .panel-heading a.collapsed:after {
        content: "\e080";
    }
</style>
<div class="col-md-12">
    <div class="well well-lg"><h2>Epreuve @ViewBag.ContestName</h2></div>
    <div>
        <div id="panelEncadrement" class="panel panel-primary">
            <div class="panel-heading">
                <h3 class="panel-title">
                    <a id="a1" data-toggle="collapse" data-target="#admins" href="#admins">
                        Choix des juges et administrateur
                    </a>
                </h3>
            </div>
            <div id="admins" class="panel-collapse collapse in">
                <div class="panel-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="panel panel-primary">
                                <div class="panel-body">
                                    <div class="input-group">
                                        <span class="input-group-addon" id="juges-addon">Juges : </span>
                                        <input class="form-control" id="juges" aria-describedby="juges-addon">
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="panel panel-primary">
                                <div class="panel-body">
                                    <div class="input-group">
                                        <span class="input-group-addon" id="admins-addon">Administrateurs : </span>
                                        <input class="form-control" id="coms" aria-describedby="admins-addon">
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div id="panelAppel" class="panel panel-primary">
            <div class="panel-heading">
                <h3 class="panel-title">
                    <a id="a2" data-toggle="collapse" data-target="#appel"
                       href="#appel" class="collapsed">
                        Appel des compétiteurs et vérification
                    </a>
                </h3>
            </div>
            <div id="appel" class="panel-collapse collapse">
                <div class="panel-body">
                    <div id="competiteurs"></div>
                    <hr />
                    <p class="text-right"><button class="btn btn-success btn-lg right" id="validatePresence">Terminer l'appel</button></p>
                </div>
            </div>
        </div>
        <div id="panelArbreCompet" class="panel panel-primary" style="display:none">
            <div class="panel-heading">
                <h3 class="panel-title">
                    <a id="a3" class="collapsed">
                        Déroulement de l'épreuve
                    </a>
                </h3>
            </div>
            <div id="epreuve" class="panel-collapse collapse">
                <div class="panel-body">
                    <div class="panel panel-info" id="epreuve">
                        <div class="panel-heading">
                            <h4 class="panel-title">
                                <a id="a4" data-toggle="collapse" data-target="#combatPanel"
                                   href="#combatPanel">
                                    Combats éliminatoires
                                </a>
                            </h4>

                        </div>
                        <div id="combatPanel" class="panel-collapse collapse in">
                            <div class="panel-body" id="combatDiagram"></div>
                        </div>
                    </div>

                    <div class="panel panel-info" id="petiteFinaleContainer">
                        <div class="panel-heading">
                            <h4 class="panel-title">
                                <a id="a5" data-toggle="collapse" data-target="#pfPanel"
                                   href="#pfPanel">
                                    Petite Finale
                                </a>
                            </h4>
                        </div>
                        <div id="pfPanel" class="panel-collapse collapse in">
                            <div class="panel-body" id="petiteFinaleDiagram"></div>
                        </div>
                    </div>
                </div>
                <div class="panel-footer">
                    <p class="text-right">Afficher le classement.<button id="showResults" class="btn btn-success btn-lg right">Valider</button></p>

                </div>
            </div>
            <div id="window">
                <p>
                    Cliquer sur le bouton ci-aprés pour afficher le chronomètre de combat.
                    Saisir le nom des compétiteurs et choisir la catégorie associée pour démarrer l'épreuve.
                </p>
                <p class="text-right">
                    <a href="../Chrono"
                       target="_blank"
                       class="btn btn-primary btn-lg right">Chrono</a>
                </p>
            </div>
        </div>
        <div id="panelPoolCompet" class="panel panel-primary" style="display:none">
            <div class="panel-heading">
                <h3 class="panel-title">
                    <a id="a6" data-toggle="collapse" data-target="#pools"
                       href="#pools">
                        Poule de qualification
                    </a>
                </h3>
            </div>
            <div id="pools" class="panel-collapse collapse in">
                <div class="panel-body">
                    <div id="boardZone" class="row">
                    </div>
                    <div>
                        <div id="classementPoule" class="col-lg-10 col-lg-offset-1 col-md-10 col-md-offset-1 col-sm-10 col-sm-offset-1 col-xs-10 col-xs-offset-1">
                        </div>
                    </div>
                </div>
                <div class="panel-footer">
                    <p class="text-right"><button id="buildClassement" class="btn btn-success btn-lg right">Générer le tableau de classement</button></p>
                    <p class="text-right"><button id="validateRanks" class="btn btn-success btn-lg right">Valider la poule</button></p>
                </div>
            </div>
        </div>
        <div id="panelResultats" class="panel panel-primary" style="display:none">
            <div class="panel-heading">
                <h3 class="panel-title">
                    <a id="a5" class="collapsed">
                        Classement Final
                    </a>
                </h3>
            </div>
            <div id="classement" class="panel-collapse collapse">
                <div class="panel-body">
                    <div id="classementGrid"></div>
                    <hr />
                </div>
                <div class="panel-footer">
                    <p class="text-right">Clôturer l'épreuve.      <button id="validateContest" class="btn btn-success btn-lg right">Valider</button></p>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="@System.Web.VirtualPathUtility.ToAbsolute("~/Scripts/kendo.all.min.js")"></script>
<script>
    var count = 0;
    var bronzeColor = "#CD7F32";
    var competiteursPresents = [];

    var pfCompetiteurs = [{
        Vainqueur: null,
        Couleur: bronzeColor,
        Children: [],
        Rank: 0,
        Id: 1,
        ParticipantId: 0,
        Nom: "",
        Prenom: "",
        Club: null,
        ClubId: 0,
        EpreuveId: 0
    }];

    var encadrants = new kendo.data.DataSource({
        transport: {
            read: {
                cache: false,
                url: "../QVKApi/GetEncadrants",
                dataType: "json",
                contentType: "application/json",
                type: "GET",
                complete: function (jqXHR, textStatus) {
                    console.log(textStatus, "update");
                    if (textStatus === "error") {
                        $("#notification").data('kendoNotification').show({
                            title: "Echec Lecture des encadrants."
                        }, "error");
                    }
                }
            },
            parameterMap: function (options) {
                return JSON.stringify(options);
            }
        },
        schema: {
            parse: function (data) {
                var datas = [];
                for (var i = 0; i < data.length; i++) {
                    datas.push({
                        Id: data[i].Id,
                        text: data[i].Nom + " " + data[i].Prenom
                    });
                }
                return datas;
            },
            model: {
                id: "Id",
                fields: {
                    Id: {
                        editable: false,
                        nullable: false
                    },
                    Nom: {
                        editable: false,
                        type: "string"
                    },
                    Prenom: {
                        editable: false,
                        type: "string"
                    },
                    MailContact: {
                        editable: false,
                        type: "string"
                    },
                    TailleTenueId: {
                        editable: false,
                        type: "number"
                    },
                    EstCompetiteur: {
                        editable: false,
                        type: "boolean"
                    },
                    GenreId: {
                        editable: false,
                        type: "number"
                    }
                }
            }
        }
    });

    function visualTemplate(options) {
        var dataviz = kendo.dataviz;
        var g = new dataviz.diagram.Group();
        var dataItem = options.dataItem;
        console.log("visualTemplate " + dataItem.Nom);

        g.append(new dataviz.diagram.Rectangle({
            width: 165,
            height: 30,
            fill: dataItem.Couleur
        }));

        var fillTextColor = (dataItem.Couleur === "#FF0000" || dataItem.Couleur === "#0000FF") ? "#dedede" : "#000000";

        g.append(new dataviz.diagram.TextBlock({
            text: dataItem.Nom + ' ' + dataItem.Prenom,
            x: 5,
            y: 5,
            fill: fillTextColor
        }));

        g.append(new dataviz.diagram.Rectangle({
            width: 30,
            x: 165,
            height: 30,
            fill: "ffffff"
        }));

        var textNode = "";

        if (dataItem.Vainqueur !== null) {
            textNode = (dataItem.Vainqueur) ? "G" : "P";
        }

        g.append(new dataviz.diagram.TextBlock({
            text: textNode,
            x: 175,
            y: 6,
            fill: "#000000"
        }));

        return g;
    }

    function findTreeviewNodeById(haystack, needle) {
        var uid = null;

        for (var i = 0; i < haystack.length; i++) {
            haystack[i].load();
            if (haystack[i].ParticipantId == needle) {
                uid = haystack[i].uid;
            }
            else if (haystack[i].Children != null) {
                uid = findTreeviewNodeById(haystack[i].Children, needle);
            }

            if (uid != null)
                break;
        }

        return uid;
    }


    function cloneProperties(o1, o2) {
        o1.Nom = o2.Nom;
        o1.ParticipantId = o2.ParticipantId;
        o1.Club = o2.Club;
        o1.Prenom = o2.Prenom;
        o1.EpreuveId = o2.EpreuveId;
        o1.ClubId = o2.ClubId;

        if (o1.parentNode && o1.parentNode() === undefined) {
            o1.Vainqueur = o2.Vainqueur;
        }
    }

    function setConsolationSource(competiteur) {
        var consolationCompetiteurs = pfCompetiteurs[0].Children;
        var count = consolationCompetiteurs.filter(function (item) {
            return item.ParticipantId && item.ParticipantId === competiteur.ParticipantId;
        }).length;

        if (count == 0) {
            var c = {
                ParticipantId: competiteur.ParticipantId,
                Nom: competiteur.Nom,
                Club: competiteur.Club,
                Prenom: competiteur.Prenom,
                EpreuveId: competiteur.EpreuveId,
                ClubId: competiteur.ClubId,
                Vainqueur: null,
                Couleur: (consolationCompetiteurs.length == 0) ? "#0000FF" : "#FF0000"
            }
            pfCompetiteurs[0].Children.push(c);
        }

        if (pfCompetiteurs[0].Children.length == 2) {
            createDiagram('#petiteFinaleDiagram', pfCompetiteurs);
            $("#petiteFinaleContainer").show();
            setTimeout(function () {
                $("#a4").trigger('click')
            }, 750);
        }
    }

    function buildChronoWindow(selector) {
        $(selector).kendoWindow({
            width: "400px",
            title: "Accès au chrono combat",
            actions: [
                "Pin",
                "Minimize",
                "Close"
            ]
        });
    }

    function createDiagram(selector, source) {
        var kendodatasource = new kendo.data.HierarchicalDataSource({
            transport: {
                read: function (e) {
                    console.log("reading competiteurs");
                    e.success(source);
                    $("div [data-role$='surface'").css('width', 'auto');
                    var options = $(selector).data('kendoDiagram').options;
                    var verticalSeparation = options.layout.verticalSeparation;
                    var shapeHeight = options.shapeDefaults.height;
                    var computed = count * shapeHeight + (count + 3) * verticalSeparation;
                    if (source[0].Couleur == bronzeColor) {
                        computed = 2 * shapeHeight + 5 * verticalSeparation;
                    }

                    $(selector + " > div [data-role$='surface'").css('height', computed);
                },
                update: function (e) {
                    var competiteur = e.data;
                    console.log("updating compétiteurs");
                    var uid = findTreeviewNodeById(competiteurDataSource.data(), competiteur.ParticipantId);
                    var item = competiteurDataSource.getByUid(uid);
                    item.set('Vainqueur', competiteur.Vainqueur);
                    competiteurDataSource.read();
                },
                parameterMap: function (options, operation) {
                    if (operation !== "read") {
                        return { models: kendo.stringify(options.models || [options]) };
                    }
                }
            },
            error: function (e) {
                console.log("Status: " + e.status + "; Error message: " + e.errorThrown);
            },
            schema: {
                model: {
                    id: "id",
                    fields: {
                        id: { from: "Id", type: "number", editable: false },
                        Nom: { type: "string", editable: false },
                        Prenom: { type: "string", editable: false },
                        Couleur: { type: "string", editable: false },
                        Vainqueur: { type: "boolean", editable: true, nullable: true },
                        Rank: { type: "number", editable: false, nullable: false },
                        Classement: { type: "string", editable: false },
                        EpreuveId: { type: "number", editable: false }
                    },
                    children: "Children"
                }
            }
        });

        $(selector).kendoDiagram({
            dataSource: kendodatasource,
            layout: {
                type: "tree",
                subtype: "left",
                horizontalSeparation: 50,
                verticalSeparation: 25
            },
            editable: {
                resize: false,
                tools: [""]
            },
            shapeDefaults: {
                visual: visualTemplate,
                height: 30,
                content: {
                    fontSize: 14,
                    align: "left",
                    color: "#DEDEDE"
                },
                editable: {
                    tools: ["edit"],
                    connect: false
                }
            },
            connectionDefaults: {
                editable: false,
                selection: false
            },
            zoomRate: 1,
            zoomMax: 1,
            zoomMin: 1,
            edit: function (e) {
                console.log("edit");

            },
            save: function (e) {
                if (e.shape.Vainqueur === null) {
                    e.shape.Vainqueur = false;
                }
                var siblings = e.shape.parent();
                var sibling = {};
                if (e.shape.parent().length == 2) {
                    for (var i = 0; i < siblings.length; i++) {
                        if (siblings[i].uid != e.shape.uid) {
                            sibling = siblings[i];
                            break;
                        }
                    }

                    sibling.Vainqueur = !e.shape.Vainqueur
                    if (e.shape.Vainqueur) {
                        cloneProperties(sibling.parentNode(), e.shape);
                        if (e.shape.Rank === 2) {
                            setConsolationSource(sibling);
                        }
                    }
                    else {
                        cloneProperties(sibling.parentNode(), sibling);
                        if (e.shape.Rank === 2) {
                            setConsolationSource(e.shape);
                        }
                    }
                }
                kendodatasource.sync();
                $(selector).data('kendoDiagram').setDataSource(kendodatasource);
            }
        });
    }

    function guid() {
        function s4() {
            return Math.floor((1 + Math.random()) * 0x10000)
                .toString(16)
                .substring(1);
        }
        return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
            s4() + '-' + s4() + s4() + s4();
    }

    function createBoards(data) {
        console.log("got boards");

        for (var i = 0; i < data.length; i++) {
            var div = $('<div class="col-lg-6 col-lg-offset-0 col-xs-12 col-md-8 col-md-offset-2  col-sm-10  col-sm-offset-1 table-responsive">');
            var table = $('<table class="table table-condensed table-hover"><tbody></tbody></table>');
            var header = $('<tr><th></th><th>Nom</th><th>Prénom</th><th>Vainqueur</th><th>Score</th><th></th></tr>')
            table.append($('<caption>' + data[i].Rencontre + '</caption>'));
            table.append(header);
            table.append(buildLine(data[i].Blue, "blue"));
            table.append(buildLine(data[i].Red, "red"));
            table.append(buildButton(data[i].Blue, data[i].Red));
            div.append(table);
            $("#boardZone").append(div);
        }
    }

    function buildButton(blue, red) {
        var tr = $('<tr>');
        var b = blue.Nom + ' ' + blue.Prenom[0].toLocaleUpperCase() + ".";
        var r = red.Nom + ' ' + red.Prenom[0].toLocaleUpperCase() + ".";
        var catId = blue.CategoriePratiquantId;
        var a = $('<a>').text('Chrono').addClass("btn btn-info").attr('href', '../chrono/index?red=' + r + '&blue=' + b + "&cat=" + catId).attr('target', '_blank').attr('role', 'button');
        var button = $('<td colspan="5">').append(a);
        tr.append(button);
        return tr;
    }


    function buildLine(competiteur, color, other) {
        var uuid = guid();
        var temp = $(document).data("competiteurs").filter(function (item) {
            console.log(item.ParticipantId);
            return item.ParticipantId === competiteur.ParticipantId;
        });
        if (!temp[0]) {
            $(document).data("competiteurs").push(competiteur);
        }

        var tr = $('<tr>').attr('data-id', uuid).attr('data-participant-id', competiteur.ParticipantId);
        var couleur = $('<td>').append(' <i class="fa fa-2x fa-flag" style="color:' + color + '"></i>')
        var nom = $('<td>').text(competiteur.Nom).attr('data-bind-for-nom', '');
        var prenom = $('<td>').text(competiteur.Prenom).attr('data-bind-for-prenom', '');
        var vainqueur = $('<td>').append('<input data-bind-for-vainqueur type="checkbox">');
        var coreInput = $('<input data-bind-for-score>').attr('id', 'scoreInputFor' + uuid);
        var score = $('<td>').append(coreInput);
        tr.append(couleur).append(nom).append(prenom).append(vainqueur).append(score);
        $(tr).find("input[data-bind-for-score]").kendoNumericTextBox({
            format: "n0",
            decimals: 0,
            min: -3,
            max: 12,
            spinners: false
        });
        return tr;
    }

    function buildData() {
        var raw = [];
        $('#boardZone').find("tr[data-id]").each(function () {
            console.log($(this).text());
            var participantId = parseInt($(this).attr("data-participant-id"), 10);
            var nom = $(this).find("[data-bind-for-nom]").text();
            var prenom = $(this).find("[data-bind-for-prenom]").text();
            var vainqueur = $(this).find("[data-bind-for-vainqueur]").is(":checked");
            var myScore = parseInt($(this).find("[data-bind-for-score]").val(), 10);
            var opponentScore = parseInt($(this).parent().find("tr[data-id!=" + $(this).attr("data-id") + "]").find("[data-bind-for-score]").val(), 10);
            var averageDiff = myScore - opponentScore;
            var filtered = raw.filter(function (item) {
                return item.ParticipantId == participantId && item.Nom == nom && item.Prenom == prenom;
            });

            if (filtered.length === 0) {
                raw.push({
                    ParticipantId: participantId,
                    Nom: nom,
                    Prenom: prenom,
                    Vainqueur: (vainqueur) ? 1 : 0,
                    Score: averageDiff
                });
            }
            else {
                for (var i = 0; i < raw.length; i++) {
                    if (raw[i].ParticipantId == participantId && raw[i].Nom == nom && raw[i].Prenom == prenom) {
                        raw[i].Score += averageDiff;
                        raw[i].Vainqueur += (vainqueur) ? 1 : 0;
                    }
                }
            }
        });
        if (raw.length == 0) {
            var newraw = [];
            var data = $("#competiteurs").data('kendoGrid').dataSource.data();
            for (var i = 0; i < data.length; i++)
            {
                var item = JSON.parse(JSON.stringify(data[i]));
                item.Vainqueur = false;
                item.Score = 0;
                newraw.push(item);
            };
            return newraw;
        }
        return raw.sort(dynamicSortMultiple("-Vainqueur", "-Score"));
    }

    function getSelectedCount(count) {
        if (count < 4) {
            return count;
        }
        else if (count < 8) {
            return 4;
        }
        else if (count >= 8 & count < 16) {
            return 8;
        }
        else {
            return 16;
        }
    }

    function validateToServer() {
        $("#validateRanks").off('click');
        var grid = $("#classementPoule").data('kendoGrid');
        var selected = [];
        var numberSelected = getSelectedCount(count);

        for (var i = 0; i < numberSelected; i++) {
            var serverModel = $(document).data("competiteurs").filter(function (item) {
                return grid.dataSource.at(i).ParticipantId == item.ParticipantId;
            })[0];
            if (serverModel) {
                selected.push(serverModel);
            }
        }

        $.ajax({
            cache: false,
            type: 'POST',
            async: true,
            url: "ValidatePool",
            data: kendo.stringify({ participations: selected }),
            contentType: 'application/json',
            dataType: 'json'
        }).success(function (result, textStatus) {
            console.log(textStatus, "validation OK");
            $("#notification").data('kendoNotification').show({
                title: "Sélection des compétiteurs validé."
            }, "success");

            count = result.count;
            $("#panelPoolCompet").hide(1000);
            $("#panelArbreCompet").show();
            competiteursPresents = result.competiteurs;
            //$(document).data("competiteurs", competiteursPresents);
            $("#validateRanks").on('click', validateToServer);
            createDiagram("#combatDiagram", competiteursPresents);
            buildChronoWindow("#window");
        }).fail(function () {
            $("#notification").data('kendoNotification').show({
                title: "Erreur Récupération Arbre"
            }, "error");
        });
    }

    function dynamicSort(property) {
        var sortOrder = 1;
        if (property[0] === "-") {
            sortOrder = -1;
            property = property.substr(1);
        }
        return function (a, b) {
            var result = (a[property] < b[property]) ? -1 : (a[property] > b[property]) ? 1 : 0;
            return result * sortOrder;
        }
    }

    function dynamicSortMultiple() {
        /*
         * save the arguments object as it will be overwritten
         * note that arguments object is an array-like object
         * consisting of the names of the properties to sort by
         */
        var props = arguments;
        return function (obj1, obj2) {
            var i = 0, result = 0, numberOfProperties = props.length;
            /* try getting a different result from 0 (equal)
             * as long as we have extra properties to compare
             */
            while (result === 0 && i < numberOfProperties) {
                result = dynamicSort(props[i])(obj1, obj2);
                i++;
            }
            return result;
        }
    }

    $(document).ready(function () {
        $(window).on('beforeunload', function () {
            return 'Attention une épreuve est en cours, il est important de ne pas quitter la page!';
        });

        $(document).data("competiteurs", []);
        $("#petiteFinaleContainer, #panelPoolCompet, #panelResultats").hide();
        $("#validateRanks").off('click').on('click', validateToServer).hide();
        $("#panelArbreCompet, #panelPoolCompet").hide();
        $("#buildClassement").off('click').on('click', function () {
            var scoreAreOk = $('input[data-bind-for-score]').filter(function (item) {
                console.log($(item).val())
                return isNaN($(item).val());
            }).length === 0;
            var checkAreOk = $('input[data-bind-for-vainqueur]').not(':checked').length === $('input[data-bind-for-vainqueur]').length / 2;
            if (!scoreAreOk || !checkAreOk) {
                return;
            }
            $("#boardZone").hide(500);
            $("#buildClassement").hide(500);
            //var data = buildData().sort(dynamicSortMultiple("-Vainqueur", "-Score"));
            var data = buildData();
            $("#classementPoule").kendoGrid({
                dataSource: data,
                columns: [
                    { field: "Nom", title: "Nom" },
                    { field: "Prenom", title: "Prénom" },
                    { field: "Vainqueur", title: "Vainqueur (points)", template: '+#= Vainqueur #' },
                    { field: "Score", title: "Score (différence)" },
                    {
                        field: "Classement",
                        title: "Classement",
                        width: 150,
                        template: function (dataItem) {
                            var grid = $("#classementPoule").data('kendoGrid');
                            var rowIndex = grid.dataSource.view().indexOf(dataItem);
                            dataItem.Classement = rowIndex + 1;
                            return "<b>" + (rowIndex + 1) + "</b>";
                        }
                    }
                ],
                dataBound: function (e) {
                    var grid = $("#classementPoule").data('kendoGrid');
                    var selectedCount = getSelectedCount(grid.dataSource.data().length);
                    for (var i = 0; i < selectedCount; i++) {
                        var dataItem = grid.dataSource.at(i);
                        var row = grid.tbody.find("tr[data-uid='" + dataItem.uid + "']");
                        row.css("backgroundColor", " #dff0d8");
                    }
                }
            });
            $("#validateRanks").show(500);
        });

        $("#juges").kendoMultiSelect({
            placeholder: "Choisissez les juges...",
            value: "Choisissez les juges...",
            dataTextField: "text",
            dataValueField: "Id",
            dataSource: encadrants,
            maxSelectedItems: 4
        });

        $("#coms").kendoMultiSelect({
            placeholder: "Choisissez les administrateurs...",
            value: "Choisissez les administrateurs...",
            dataTextField: "text",
            dataValueField: "Id",
            dataSource: encadrants,
            maxSelectedItems: 3
        });

        var competiteurDataSource = new kendo.data.DataSource({
            transport: {
                read: {
                    cache: false,
                    url: "GetPresentiel",
                    dataType: "json",
                    complete: function (jqXHR, textStatus) {
                        console.log(textStatus, "update");
                        if (textStatus === "error") {
                            $("#notification").data('kendoNotification').show({
                                title: "Echec Lecture des compétiteurs."
                            }, "error");
                        }
                    }
                },
                parameterMap: function (options, operation) {
                    if (operation !== "read" && options.models) {
                        return { models: kendo.stringify(options.models) };
                    }
                    else {
                        return kendo.stringify(options);
                    }
                }
            },
            schema: {
                model: {
                    id: "ParticipantId",
                    fields: {
                        ParticipantId: {
                            editable: false,
                            nullable: false
                        },
                        Nom: {
                            editable: false,
                            type: "string"
                        },
                        Prenom: {
                            editable: false,
                            type: "string"
                        },
                        Club: {
                            field: "Club",
                            type: "string"
                        },
                        Present: {
                            editable: true,
                            type: "boolean"
                        },
                        Rank: { type: "number", editable: false, nullable: false },
                        Classement: { type: "string", editable: false },
                        EpreuveId: { type: "number", editable: false }
                    }
                }
            }
        });

        $("#competiteurs").kendoGrid({
            dataSource: competiteurDataSource,
            autosync: true,
            columns: [
                { field: "Nom", title: "Nom" },
                { field: "Prenom", title: "Prénom" },
                { field: "Club", width: "200px", title: "Club" },
                { field: "Present", title: "Présent", template: '<input type="checkbox" #= Present ? "checked=checked" : "" # disabled="disabled" ></input>' }
            ],
            editable: "incell"
        });

        $("#showResults").off('click').on('click', function (e) {
            $("#panelArbreCompet").hide(1000);
            $("#panelResultats").show(1000);
            var ds = $("#combatDiagram").data('kendoDiagram').dataSource;
            var first = ds.at(0);
            first.Classement = 1;

            var second = ds.at(0).Children.filter(function (item) {
                return item.Nom != ds.at(0).Nom && item.ParticipantId != ds.at(0).ParticipantId;
            })[0];
            second.Classement = 2;
            var podium = [first, second];

            if ($("#petiteFinaleDiagram").data('kendoDiagram')) {
                var thirdDS = $("#petiteFinaleDiagram").data('kendoDiagram').dataSource;
                var third = thirdDS.at(0);

                var uid = findTreeviewNodeById(ds.data(), third.ParticipantId);

                var thirdFromTree = ds.getByUid(uid);
                thirdFromTree.Classement = 3;

                var fourth = thirdDS.at(0).Children.filter(function (item) {
                    return item.Nom != thirdDS.at(0).Nom && item.ParticipantId != thirdDS.at(0).ParticipantId;
                })[0];

                uid = findTreeviewNodeById(ds.data(), fourth.ParticipantId);
                var fourthFromTree = ds.getByUid(uid);
                fourthFromTree.Classement = 4;
                podium.push(thirdFromTree);
                podium.push(fourthFromTree);
            }

            $("#classementGrid").kendoGrid({
                dataSource: podium,
                columns: [
                    { field: "Nom", title: "Nom" },
                    { field: "Prenom", title: "Prénom" },
                    {
                        field: "Classement",
                        title: "Classement",
                        width: 150,
                        template: function (dataItem) {
                            var grid = $("#classementGrid").data('kendoGrid');
                            var rowIndex = grid.dataSource.view().indexOf(dataItem);
                            dataItem.Classement = rowIndex + 1;
                            return "<b>" + (rowIndex + 1) + "</b>";
                        }
                    }
                ]
            });

            $("#a5").attr('data-toggle', 'collapse').attr('data-target', '#classement').attr('href', "#classement").removeClass("collapsed");
            $("#a5").trigger('click');
        });

        $("#validateContest").off('click').on('click', function (e) {
            //var ds = $("#combatDiagram").data('kendoDiagram').dataSource;
            //var first = ds.at(0);
            //first.Classement = 1;

            //var secondTemp = ds.at(0).Children.filter(function (item) {
            //    return item.Nom != ds.at(0).Nom && item.ParticipantId != ds.at(0).ParticipantId;
            //})[0];
            //secondTemp.Classement = 2;
            //var second = {
            //    Nom: secondTemp.Nom,
            //    Prenom: secondTemp.Prenom
            //}

            //var thirdDS = $("#petiteFinaleDiagram").data('kendoDiagram').dataSource;
            //var third = thirdDS.at(0);

            //var uid = findTreeviewNodeById(ds.data(), third.ParticipantId);

            //var original = ds.getByUid(uid);
            //original.Classement = 3;

            //var fourth = thirdDS.at(0).Children.filter(function (item) {
            //    return item.Nom != thirdDS.at(0).Nom && item.ParticipantId != thirdDS.at(0).ParticipantId;
            //})[0];

            //uid = findTreeviewNodeById(ds.data(), fourth.ParticipantId);
            //original = ds.getByUid(uid);
            //original.Classement = 4;


            var data = $("#classementGrid").data('kendoGrid').dataSource.data();
            $.ajax({
                cache: false,
                type: 'POST',
                async: true,
                url: "TerminerEpreuveCombat",
                data: kendo.stringify({ resultats: data }),
                contentType: 'application/json',
                dataType: 'json'
            }).success(function (response) {
                $(window).off('beforeunload');
                window.location.href = response.Uri;
            }).fail(function () {
                $("#notification").data('kendoNotification').show({
                    title: "Erreur à la clôture."
                }, "error");
            });
        });

        $("#validatePresence").off('click').on('click', function (e) {
            var grid = $("#competiteurs").data('kendoGrid');
            var competiteurs = [];
            var competiteursPresents = [];
            $.each(grid.dataSource.data(), function (i, e) {
                competiteurs.push(e);
                if (e.Present) {
                    competiteursPresents.push(JSON.parse(kendo.stringify(e)));
                }
            });

            var encadrants = [];
            $.each($("#juges").data('kendoMultiSelect').dataItems(), function (i, e) {
                encadrants.push({ Id: e.Id, Role: "Arbitre" });
            });
            $.each($("#coms").data('kendoMultiSelect').dataItems(), function (i, e) {
                encadrants.push({ Id: e.Id, Role: "Commissaire" });
            });
            $(document).data("competiteurs", competiteursPresents);
            $.ajax({
                cache: false,
                type: 'POST',
                async: true,
                url: "UpdatePresentielCombat",
                data: kendo.stringify({ participations: competiteurs, encadrants: encadrants }),
                contentType: 'application/json',
                dataType: 'json'
            }).success(function (result, textStatus) {
                console.log(textStatus, "validation OK");
                $("#notification").data('kendoNotification').show({
                    title: "Appel des compétiteurs validé."
                }, "success");

                count = result.count;
                var usePool = result.usePool;
                if (!usePool) {
                    $("#panelArbreCompet").show();
                    competiteursPresents = result.competiteurs;
                    createDiagram("#combatDiagram", competiteursPresents);
                    buildChronoWindow("#window");
                }
                else {
                    //$(document).data('competiteurs', result.rounds);
                    $(" #panelPoolCompet").show();
                    if (result.rounds.length > 4) {
                        $(" #panelPoolCompet").show();
                        createBoards(result.rounds);
                    }
                    else {
                        $("#boardZone").append("<h3>Moins de 4 compétiteurs. Pas de poule nécessaire.</h3>")
                    }
                }

                $("#a1, #a2").not('.collapsed').trigger('click');
                $("#a1, #a2").removeAttr('data-toggle').removeAttr('data-target').attr('href', "#").addClass("collapsed");
                $("#panelEncadrement, #panelAppel").hide(1000);
                $("#a3").attr('data-toggle', 'collapse').attr('data-target', '#epreuve').attr('href', "#epreuve").removeClass("collapsed");
                $("#a3").trigger('click');
            }).fail(function () {
                $("#notification").data('kendoNotification').show({
                    title: "Erreur Validation Appel"
                }, "error");
            });

        });

        $(".k-layer[data-role$='surface']").css
    });
</script>
