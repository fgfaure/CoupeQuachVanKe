
<div class="col-sm-2">
    @RenderPage("../Shared/_Menu.cshtml")
</div>
<div class="col-sm-10">
    <h2>Liste des Compétiteurs</h2>
    <div id="competiteurs">
    </div>
</div>
<script src="@System.Web.VirtualPathUtility.ToAbsolute("~/Scripts/kendo.all.min.js")"></script>
<script>

    function onDataBound() {
        var grid = $("#competiteurs").data("kendoGrid");
        var data = grid.dataSource.data();
        $.each(data, function (i, row) {
            var validImport = row.ValidImport;

            if (!validImport) {
                //Change the background color of QtyReceived here
                $('tr[data-uid="' + row.uid + '"]').css("background-color", "orange");
            }
        });
    }

    $(document).ready(function () {
        var categorieDataSource = new kendo.data.DataSource({
            transport: {
                read: {
                    async: false,
                    url: "../QVKApi/GetCategories",
                    dataType: "json",
                    complete: function (jqXHR, textStatus) {
                        console.log(textStatus, "update");
                        if (textStatus === "error") {
                            $("#notification").data('kendoNotification').show({
                                title: "Echec Lecture des catégories."
                            }, "error");
                        }
                    }
                },
                parameterMap: function (options, operation) {
                    if (operation !== "read" && options.models) {
                        return { models: kendo.stringify(options.models) };
                    }
                    else {
                        return kendo.stringify(options);
                    }
                }
            },
            schema: {
                parse: function (data) {
                    var datas = [];
                    for (var i = 0; i < data.length; i++) {
                        datas.push({
                            value: data[i].Id,
                            text: data[i].Nom
                        });
                    }
                    return datas;
                },
                model: {
                    id: "value",
                    fields: {
                        value: {
                            //this field will not be editable (default value is true)
                            editable: false,
                            // a defaultValue will not be assigned (default value is false)
                            nullable: false
                        },
                        text: {
                            //set validation rules
                            type: "string",
                        }
                    }
                }
            }
        });
        categorieDataSource.read();

        var grades = new kendo.data.DataSource({
            transport: {
                read: {
                    async: false,
                    url: "../QVKApi/GetGrades",
                    dataType: "json",
                    complete: function (jqXHR, textStatus) {
                        console.log(textStatus, "update");
                        if (textStatus === "error") {
                            $("#notification").data('kendoNotification').show({
                                title: "Echec Lecture des grades."
                            }, "error");
                        }
                    }
                },
                parameterMap: function (options, operation) {
                    if (operation !== "read" && options.models) {
                        return { models: kendo.stringify(options.models) };
                    }
                    else {
                        return kendo.stringify(options);
                    }
                }
            },
            schema: {
                model: {
                    id: "value",
                    fields: {
                        value: {
                            //this field will not be editable (default value is true)
                            editable: false,
                            // a defaultValue will not be assigned (default value is false)
                            nullable: false
                        },
                        text: {
                            //set validation rules
                            type: "string",
                        }
                    }
                }
            }
        });
        grades.read();

        var clubsDataSource = new kendo.data.DataSource({
            transport: {
                read: {
                    cache: false,
                    async: false,
                    url: "../QVKApi/GetClubs",
                    dataType: "json",
                    complete: function (jqXHR, textStatus) {
                        console.log(textStatus, "update");
                        if (textStatus === "error") {
                            $("#notification").data('kendoNotification').show({
                                title: "Echec Lecture des clubs."
                            }, "error");
                        }
                    }
                },
                parameterMap: function (options, operation) {
                    if (operation !== "read" && options.models) {
                        return { models: kendo.stringify(options.models) };
                    }
                    else {
                        return kendo.stringify(options);
                    }
                }
            },
            schema: {
                parse: function (data) {
                    var clubs = [];
                    for (var i = 0; i < data.length; i++) {
                        var club = {
                            value: data[i].Id,
                            text: data[i].Nom
                        };
                        clubs.push(club);
                    }
                    return clubs;
                },
                model: {
                    id: "Id",
                    fields: {
                        Id: {
                            //this field will not be editable (default value is true)
                            editable: false,
                            // a defaultValue will not be assigned (default value is false)
                            nullable: false
                        },
                        Nom: {
                            //set validation rules
                            type: "string",
                        }
                    }
                }
            }
        });
        clubsDataSource.read();

        var competiteurDataSource = new kendo.data.DataSource({
            transport: {
                read: {
                    cache: false,
                    url: "Get",
                    dataType: "json",
                    complete: function (jqXHR, textStatus) {
                        console.log(textStatus, "update");
                        if (textStatus === "error") {
                            $("#notification").data('kendoNotification').show({
                                title: "Echec Lecture des compétiteurs."
                            }, "error");
                        }
                    }
                },
                update: {
                    url: "Update",
                    dataType: "json", // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                    contentType: "application/json",
                    type: "POST",
                    complete: function (jqXHR, textStatus) {
                        console.log(textStatus, "update");
                        if (textStatus === "error") {
                            $("#notification").data('kendoNotification').show({
                                title: "Echec Mise à jour."
                            }, "error");
                        }
                        else {
                            $("#notification").data('kendoNotification').show({
                                title: "Mise à jour réussie."
                            }, "success");
                        }
                    }
                },
                destroy: {
                    url: "Delete",
                    dataType: "json",
                    contentType: "application/json",
                    type: "POST",
                    complete: function (jqXHR, textStatus) {
                        console.log(textStatus, "delete");
                        if (textStatus === "error") {
                            $("#notification").data('kendoNotification').show({
                                title: "Echec Suppression."
                            }, "error");
                        }
                        else {
                            $("#notification").data('kendoNotification').show({
                                title: "Suppression réussie."
                            }, "success");
                        }
                    }
                },
                create: {
                    url: "Create",
                    dataType: "json",
                    contentType: "application/json",
                    type: "POST",
                    complete: function (jqXHR, textStatus) {
                        console.log(textStatus, "create");
                        if (textStatus === "error") {
                            $("#notification").data('kendoNotification').show({
                                title: "Echec Création."
                            }, "error");
                        }
                        else {
                            $("#notification").data('kendoNotification').show({
                                title: "Création réussie."
                            }, "success");
                        }
                    }
                },
                parameterMap: function (options, operation) {
                    if (operation !== "read" && options.models) {
                        return { models: kendo.stringify(options.models) };
                    }
                    else {
                        return kendo.stringify(options);
                    }
                }
            },
            schema: {
                model: {
                    id: "Id",
                    fields: {
                        Id: {
                            editable: false,
                            nullable: false
                        },
                        Nom: {
                            editable: true,
                            type: "string",
                            validation: { required: true }
                        },
                        Prenom: {
                            editable: true,
                            type: "string",
                            validation: { required: true }
                        },
                        DateNaissance: {
                            editable: true,
                            type: "date",
                            validation: { required: true }
                        },
                        GenreId: {
                            field: "GenreId",
                            type: "number",
                            defaultValue: 1
                        },
                        ClubId: {
                            field: "ClubId",
                            type: "number",
                            defaultValue: 1
                        },
                        LicenceFFKDA: {
                            editable: true,
                            type: "string",
                            validation: { required: true }
                        },
                        GradeId: {
                            editable: true,
                            type: "number",
                            defaultValue: 1,
                            validation: { required: true }
                        },
                        CategorieId: {
                            editable: true,
                            type: "number",
                            defaultValue: 1,
                            validation: { required: true }
                        },
                        NbAnneePratique: {
                            editable: true,
                            type: "string"
                        },
                        InscriptionValidePourCoupe: {
                            editable: true,
                            type: "boolean"
                        },
                        InscritPourBaiVuKhi: {
                            editable: true,
                            type: "boolean"
                        },
                        InscritPourQuyen: {
                            editable: true,
                            type: "boolean"
                        },
                        //InscritPourSongLuyen: {
                        //    editable: true,
                        //    type: "boolean"
                        //},
                        InscritPourQuyenDongDien: {
                            editable: true,
                            type: "boolean"
                        },
                        NumeroEquipe: {
                            editable: true,
                            type: "number"
                        },
                        InscritPourCombat: {
                            editable: true,
                            type: "boolean"
                        },
                        Poids: {
                            editable: true,
                            type: "number"
                        },
                        ValidImport: {
                            editable: false,
                            type: "boolean",
                            defaultValue: true
                        }
                    }
                }
            },
            pageSize: 25
        });
        function getDocName(e) {
            return "ListingCompetiteurs.xlsx";
        };

        var genres = [{ value: 1, text: "Féminin" }, { value: 2, text: "Masculin" }];

        $("#competiteurs").kendoGrid({
            dataSource: competiteurDataSource,
            pageable: {
                refresh: true,
                pagesize: 50,
                pageSizes: [25, 50, 300],
                buttonCount: 5
            },
            sortable: true,
            groupable: true,
            filterable: true,
            filterMenuInit: function (e) {
                e.container.addClass("widerMenu");
            },
            autosync: true,
            toolbar: [
                { name: "excel", text: "Exporter en Excel" },
                { name: "create", text: "Ajouter" }
            ],
            excel: {
                allPages: true,
                fileName: getDocName(),
                proxyURL: "ExcelSave",
                filterable: true
            },
            columns: [
                { field: "Nom", title: "Nom" },
                { field: "Prenom", title: "Prénom" },
                {
                    field: "DateNaissance", title: "Date de Naissance", template: '#= kendo.toString(DateNaissance, "dd/MM/yyyy") #',
                    groupHeaderTemplate: 'Date de Naissance : #=  kendo.toString(value, "dd/MM/yyyy") #'
                },
                { field: "GenreId", values: genres, filterable: true, title: "Sexe" },
                { field: "ClubId", width: "200px", values: clubsDataSource.data().toJSON(), title: "Club" },
                { field: "LicenceFFKDA", title: "Licence", filterable: false },
                { field: "CategorieId", values: categorieDataSource.data().toJSON(), title: "Catégorie" },
                { field: "GradeId", values: grades.data().toJSON(), title: "Grade" },
                { field: "InscriptionValidePourCoupe", title: "Validé", filterable: false, template: '<input type="checkbox" #= InscriptionValidePourCoupe ? "checked=checked" : "" # disabled="disabled" ></input>', width: "60px" },
                {
                    field: "InscritPourBaiVuKhi", filterable: {
                        messages: {
                            isTrue: "Oui",
                            isFalse: "Non"
                        }
                    }, title: "Vu Khi", template: '<input type="checkbox" #= InscritPourBaiVuKhi ? "checked=checked" : "" # disabled="disabled" ></input>', width: "65px" },
                {
                    field: "InscritPourQuyen", filterable: {
                        messages: {
                            isTrue: "Oui",
                            isFalse: "Non"
                        }
                    }, title: "Quyen", template: '<input type="checkbox" #= InscritPourQuyen ? "checked=checked" : "" # disabled="disabled" ></input>', width: "65px" },
                //{ field: "InscritPourSongLuyen", filterable: false, title: "Song Luyen", template: '<input type="checkbox" #= InscritPourSongLuyen ? "checked=checked" : "" # disabled="disabled" ></input>', width: "100px" },
                {
                    field: "InscritPourQuyenDongDien", filterable: {
                        messages: {
                            isTrue: "Oui",
                            isFalse: "Non"
                        }
                    },
                    title: "Phan Te", template: '<input type="checkbox" #= InscritPourQuyenDongDien ? "checked=checked" : "" # disabled="disabled" ></input>', width: "80px"
                },
                { field: "NumeroEquipe", title: "Equipe", width: "70px" },
                {
                    field: "InscritPourCombat",
                    filterable: {
                        messages: {
                            isTrue: "Oui",
                            isFalse: "Non"
                        }
                    },
                    title: "Combat", template: '<input type="checkbox" #= InscritPourCombat ? "checked=checked" : "" # disabled="disabled" ></input>', width: "70px"
                },
                { field: "Poids", title: "Poids", filterable: false, width: "60px" },
                { command: ["edit", "destroy"], title: "&nbsp;", width: "180px" }
            ],
            dataBound: onDataBound,
            editable: "popup",
            edit: function (e) {
                var editWindow = this.editable.element.data("kendoWindow");
                editWindow.wrapper.addClass("widerMenu");

                var container = e.container;
                //var startWidget = container.find("[data-role=datepicker]").each(function (i, datepicker) {
                //    $(datepicker).data("kendoDatePicker").setOptions({
                //        format: "dd/MM/yyyy"
                //    });
                //});
            }
        });
    });

</script>
