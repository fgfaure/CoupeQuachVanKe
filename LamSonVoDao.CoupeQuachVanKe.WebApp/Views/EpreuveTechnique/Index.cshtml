<div class="col-sm-2">
    @RenderPage("../Shared/_Menu.cshtml")
</div>
<div class="col-sm-10">
    <h2>Liste des Epreuves Techniques</h2>
    <div class="panel panel-default">
        <div class="panel-heading">
            <h3 class="panel-title">Ventiler les épreuves techniques</h3>
        </div>
        <div class="panel-body">
            Affecter les compétiteurs inscrits aux épreuves techniques.
            <button name="ventilationTechnique" id="vt">Ventiler</button>
        </div>
        <div id="epreuvesVentilees" />
    </div>
    <hr />
    <div id="epreuvesTechniques">
    </div>
</div>
<script type="text/x-kendo-template" id="template">
    <div class="tabstrip">
        <ul>
            <li class="k-state-active">
                Compétiteurs
            </li>
        </ul>
        <div>
            <div class='competiteurs'>
            </div>
        </div>
    </div>
</script>

<script>
    $(document).ready(function () {

        function detailInit(e) {
            var detailRow = e.detailRow;

            detailRow.find(".tabstrip").kendoTabStrip({
                animation: {
                    open: { effects: "fadeIn" }
                }
            });

            detailRow.find(".competiteurs").kendoGrid({
                dataSource: e.data.competiteurs,
                scrollable: false,
                sortable: true,
                pageable: {
                    refresh: true,
                    pageSizes: true,
                    buttonCount: 5
                },
                columns: [
                    { field: "Nom", title: "Nom" },
                    { field: "Prenom", title: "Prénom" }                    
                ]
            });

        }

        $("#vt").off('click').on('click', function () {
            $.ajax({
                url: 'Ventilation',
                cache: false
            }).success(function (data) {
                $("#epreuvesVentilees").kendoGrid({
                    dataSource: data,
                    pageable: {
                        refresh: true,
                        pageSizes: true,
                        buttonCount: 5
                    },
                    sortable: true,
                    groupable: true,
                    filterable: true,
                    autosync: true,
                    toolbar: ["create"],
                    detailTemplate: kendo.template($("#template").html()),
                    detailInit: detailInit,
                    //dataBound: function () {
                    //    this.expandRow(this.tbody.find("tr.k-master-row").first());
                    //},
                    columns: [
                        { field: "epreuve", title: "Nom" }
                    ]
                });
            });

        });
        var statuses = new kendo.data.DataSource({
            transport: {
                read: {
                    async: false,
                    url: "../QVKApi/GetStatuses",
                    dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                },
                parameterMap: function (options, operation) {
                    if (operation !== "read" && options.models) {
                        return { models: kendo.stringify(options.models) };
                    }
                    else {
                        return kendo.stringify(options);
                    }
                }
            },
            schema: {
                model: {
                    id: "value",
                    fields: {
                        value: {
                            //this field will not be editable (default value is true)
                            editable: false,
                            // a defaultValue will not be assigned (default value is false)
                            nullable: false
                        },
                        text: {
                            //set validation rules
                            type: "string",
                        }
                    }
                }
            }
        });
        statuses.read();

        var genres = new kendo.data.DataSource({
            transport: {
                read: {
                    async: false,
                    url: "../QVKApi/GetGenreEpreuves",
                    dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                },
                parameterMap: function (options, operation) {
                    if (operation !== "read" && options.models) {
                        return { models: kendo.stringify(options.models) };
                    }
                    else {
                        return kendo.stringify(options);
                    }
                }
            },
            schema: {
                model: {
                    id: "value",
                    fields: {
                        value: {
                            //this field will not be editable (default value is true)
                            editable: false,
                            // a defaultValue will not be assigned (default value is false)
                            nullable: false
                        },
                        text: {
                            //set validation rules
                            type: "string",
                        }
                    }
                }
            }
        });
        genres.read();

        var categories = new kendo.data.DataSource({
            transport: {
                read: {
                    async: false,
                    url: "../QVKApi/GetCategories",
                    dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                },
                parameterMap: function (options, operation) {
                    if (operation !== "read" && options.models) {
                        return { models: kendo.stringify(options.models) };
                    }
                    else {
                        return kendo.stringify(options);
                    }
                }
            },
            schema: {
                model: {
                    id: "value",
                    fields: {
                        value: {
                            //this field will not be editable (default value is true)
                            editable: false,
                            // a defaultValue will not be assigned (default value is false)
                            nullable: false
                        },
                        text: {
                            //set validation rules
                            type: "string",
                        }
                    }
                }
            }
        });
        categories.read();

        var grades = new kendo.data.DataSource({
            transport: {
                read: {
                    async: false,
                    url: "../QVKApi/GetGrades",
                    dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                },
                parameterMap: function (options, operation) {
                    if (operation !== "read" && options.models) {
                        return { models: kendo.stringify(options.models) };
                    }
                    else {
                        return kendo.stringify(options);
                    }
                }
            },
            schema: {
                model: {
                    id: "value",
                    fields: {
                        value: {
                            //this field will not be editable (default value is true)
                            editable: false,
                            // a defaultValue will not be assigned (default value is false)
                            nullable: false
                        },
                        text: {
                            //set validation rules
                            type: "string",
                        }
                    }
                }
            }
        });
        grades.read();

        var techniques = new kendo.data.DataSource({
            transport: {
                read: {
                    async: false,
                    url: "../QVKApi/GetTypeEpreuvesTechniques",
                    dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                },
                parameterMap: function (options, operation) {
                    if (operation !== "read" && options.models) {
                        return { models: kendo.stringify(options.models) };
                    }
                    else {
                        return kendo.stringify(options);
                    }
                }
            },
            schema: {
                parse: function (data) {
                    var ep = [{ value: 0, text: '-- Choisissez --' }];
                    for (var i = 0; i < data.length; i++) {
                        ep.push({
                            value: data[i].Id,
                            text: data[i].Nom
                        });
                    }
                    return ep;
                },
                model: {
                    id: "Id",
                    fields: {
                        Id: {
                            //this field will not be editable (default value is true)
                            editable: false,
                            // a defaultValue will not be assigned (default value is false)
                            nullable: false
                        },
                        Nom: {
                            //set validation rules
                            type: "string",
                        }
                    }
                }
            }
        });
        techniques.read();

        var epreuves = new kendo.data.DataSource({
            transport: {
                read: {
                    url: "Get",
                    dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                },
                update: {
                    url: "Update",
                    dataType: "json", // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                    contentType: "application/json",
                    type: "POST"
                },
                destroy: {
                    url: "Delete",
                    dataType: "json",
                    contentType: "application/json",
                    type: "POST"
                },
                create: {
                    url: "Create",
                    dataType: "json",
                    contentType: "application/json",
                    type: "POST"
                },
                parameterMap: function (options, operation) {
                    if (operation !== "read" && options.models) {
                        return { models: kendo.stringify(options.models) };
                    }
                    else {
                        return kendo.stringify(options);
                    }
                }
            },
            schema: {
                model: {
                    id: "Id",
                    fields: {
                        Id: {
                            editable: false,
                            nullable: false
                        },
                        //Nom: {
                        //    editable: true,
                        //    type: "string",
                        //    validation: { required: true }
                        //},
                        //Description: {
                        //    editable: true,
                        //    type: "string"
                        //},
                        StatutId: {
                            editable: false,
                            type: "number",
                            defaultValue: 1
                        },
                        TypeEpreuveId: {
                            editable: true,
                            type: "number",
                            defaultValue: 1
                        },
                        CategorieId: {
                            editable: true,
                            type: "number",
                            defaultValue: 1
                        },
                        GenreCategorieId: {
                            editable: true,
                            type: "number",
                            defaultValue: 1,
                        },
                        GradeAutoriseId: {
                            editable: true,
                            type: "number",
                            defaultValue: 1,
                        }
                    }
                }
            },
            pageSize: 10
        });

        $("#epreuvesTechniques").kendoGrid({
            dataSource: epreuves,
            pageable: {
                refresh: true,
                pageSizes: true,
                buttonCount: 5
            },
            sortable: true,
            groupable: true,
            filterable: true,
            autosync: true,
            toolbar: ["create"],
            columns: [
                    //{ field: "Nom", title: "Nom" },
                    //{ field: "Description", title: "Description" },
                    { field: "TypeEpreuveId", title: "Type d'Epreuve", values: techniques.data().toJSON() },
                    { field: "CategorieId", title: "Catégorie", values: categories.data().toJSON() },
                    { field: "GenreCategorieId", title: "Genre", values: genres.data().toJSON() },
                    { field: "GradeAutoriseId", title: "Grade", values: grades.data().toJSON() },
                    { field: "StatutId", title: "Statut", values: statuses.data().toJSON() },
                    { command: ["edit", "destroy"], title: "&nbsp;", width: "190px" }
            ],
            editable: {
                mode: "popup",
                template: $("#popup_editor").html()
            },
        });
    });
</script>